const express = require('express')
const secRouter = express.Router()
const bcrypt = require('bcryptjs') 
const jwt = require('jsonwebtoken') 
const knex = require('knex')({
    client: 'pg',
    debug: true,
    connection: {
        connectionString: process.env.DATABASE_URL,
        ssl: { rejectUnauthorized: false },
    }
});

secRouter.use(express.urlencoded({ extended: true })) // processar o body
secRouter.use(express.json()) // processa o body em formato json

// Registrar novo usuÃ¡rio 
secRouter.post ('/register', (req, res) => { 
    knex ('usuario') 
        .insert({ 
            nome: req.body.nome,  
            login: req.body.login,  
            senha: bcrypt.hashSync(req.body.senha, 8),  
            email: req.body.email 
        }, ['id']) 
        .then((result) => { 
            let usuario = result[0] 
            res.status(200).json({id: usuario.id })  
            return 
        }) 
        .catch(err => { 
            res.status(500).json({  
                message: 'Erro ao registrar usuario - ' + err.message }) 
        })   
}) 

// Realizar o login 
secRouter.post('/login', (req, res) => {  
    knex 
      .select('*').from('usuario').where( { login: req.body.login }) 
      .then( usuarios => { 
          if(usuarios.length){ 
              let usuario = usuarios[0] 
              let checkSenha = bcrypt.compareSync (req.body.senha, usuario.senha) 
              if (checkSenha) { 
                 var tokenJWT = jwt.sign({ id: usuario.id },  
                      process.env.SECRET_KEY, { 
                        expiresIn: 3600 
                      }) 
 
                  res.status(200).json ({ 
                      id: usuario.id, 
                      login: usuario.login,  
                      nome: usuario.nome,  
                      roles: usuario.roles, 
                      token: tokenJWT 
                  })   
                  return  
              } 
          }  
             
          res.status(401).json({ message: 'Login ou senha incorretos' }) 
      }) 
      .catch (err => { 
          res.status(500).json({  
             message: 'Erro ao verificar login - ' + err.message }) 
      }) 
}) 

module.exports = secRouter